From a8bf1a8f8de1c0ae8f303355d3c3c83b7aee706e Mon Sep 17 00:00:00 2001
From: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
Date: Thu, 26 Nov 2009 11:31:45 +0530
Subject: [PATCH 2/7] Step2: Introduce fill_super and get a valid root inode

Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
Signed-off-by: Chandan Rajendra <chandan@linux.vnet.ibm.com>
---
 samplefs.h | 42 +++++++++++++++++++++++++
 super.c    | 90 +++++++++++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 127 insertions(+), 5 deletions(-)
 create mode 100644 samplefs.h

diff --git a/samplefs.h b/samplefs.h
new file mode 100644
index 0000000..995bf54
--- /dev/null
+++ b/samplefs.h
@@ -0,0 +1,42 @@
+/*
+ *   fs/samplefs/samplefs.h
+ *
+ *   Copyright (C) International Business Machines  Corp., 2006, 2007
+ *   Author(s): Steve French (sfrench@us.ibm.com)
+ *              Aneesh Kumar K.V (aneesh.kumar@linux.vnet.ibm.com)
+ *
+ *   Sample File System
+ *
+ *   Primitive example to show how to create a Linux filesystem module
+ *
+ *   This library is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU Lesser General Public License as published
+ *   by the Free Software Foundation; either version 2.1 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This library is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
+ *   the GNU Lesser General Public License for more details.
+ *
+ *   You should have received a copy of the GNU Lesser General Public License
+ *   along with this library; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#define SAMPLEFS_ROOT_I 2
+
+/* This is an example of filesystem specific mount data that a file system might
+   want to store.  FS per-superblock data varies widely and some fs do not
+   require any information beyond the generic info which is already in
+   struct super_block */
+struct samplefs_sb_info {
+	int samplefs_var1;
+	int samplefs_var2;
+};
+
+static inline struct samplefs_sb_info *
+SFS_SB(struct super_block *sb)
+{
+	return sb->s_fs_info;
+}
diff --git a/super.c b/super.c
index 43318c0..add7b83 100644
--- a/super.c
+++ b/super.c
@@ -28,16 +28,98 @@
 
 #include <linux/module.h>
 #include <linux/fs.h>
+#include <linux/pagemap.h>
 #include <linux/version.h>
 #include <linux/slab.h>
+#include <linux/sched.h>
+#include "samplefs.h"
 
 /* helpful if this is different than other fs */
 #define SAMPLEFS_MAGIC     0x73616d70 /* "SAMP" */
 
-static int samplefs_fill_super(struct super_block * sb, void * data, int silent)
+static void samplefs_put_super(struct super_block *sb)
 {
-	printk(KERN_ERR "samplefs not fully done\n");
-	return -EINVAL;
+	struct samplefs_sb_info *sfs_sb;
+
+	sfs_sb = SFS_SB(sb);
+	if (sfs_sb == NULL) {
+		/* Empty superblock info passed to unmount */
+		return;
+	}
+	/* FS-FILLIN your fs specific umount logic here */
+	kfree(sfs_sb);
+	sb->s_fs_info = NULL;
+	return;
+}
+
+struct super_operations samplefs_super_ops = {
+	.statfs         = simple_statfs,
+	.drop_inode     = generic_delete_inode, /* Not needed, is the default */
+	.put_super      = samplefs_put_super,
+};
+
+struct inode *samplefs_get_inode(struct super_block *sb,
+				const struct inode *dir, int mode, dev_t dev)
+{
+	struct inode * inode = new_inode(sb);
+
+	if (inode) {
+		inode->i_ino = get_next_ino();
+		inode_init_owner(inode, dir, mode);
+		inode->i_blocks = 0;
+		inode->i_atime = inode->i_mtime = inode->i_ctime = current_time(inode);
+		switch (mode & S_IFMT) {
+			default:
+				init_special_inode(inode, mode, dev);
+				break;
+			case S_IFREG:
+				printk(KERN_INFO "file inode\n");
+				inode->i_op = &simple_dir_inode_operations;
+				break;
+			case S_IFDIR:
+				inode->i_op = &simple_dir_inode_operations;
+
+				/* link == 2 (for initial ".." and "." entries) */
+				inode_inc_link_count(inode);
+				break;
+		}
+	}
+	return inode;
+}
+
+static int samplefs_fill_super(struct super_block *sb, void *data, int silent)
+{
+	struct inode *root;
+	struct samplefs_sb_info * sfs_sb;
+
+	sb->s_maxbytes = MAX_LFS_FILESIZE; /* NB: may be too large for mem */
+	sb->s_blocksize = PAGE_SIZE;
+	sb->s_blocksize_bits = PAGE_SHIFT;
+	sb->s_magic = SAMPLEFS_MAGIC;
+	sb->s_op = &samplefs_super_ops;
+	sb->s_time_gran = 1; /* 1 nanosecond time granularity */
+
+	printk(KERN_INFO "samplefs: fill super\n");
+	root = samplefs_get_inode(sb, NULL, S_IFDIR | 0755, 0);
+	if (!root)
+		return -ENOMEM;
+
+	sb->s_fs_info = kzalloc(sizeof(struct samplefs_sb_info), GFP_KERNEL);
+	sfs_sb = SFS_SB(sb);
+	if (!sfs_sb) {
+		iput(root);
+		return -ENOMEM;
+	}
+	printk(KERN_INFO "samplefs: about to alloc dentry root inode\n");
+	sb->s_root = d_make_root(root);
+	if (!sb->s_root) {
+		iput(root);
+		kfree(sfs_sb);
+		sb->s_fs_info = NULL;
+		return -ENOMEM;
+	}
+	/* FS-FILLIN your filesystem specific mount logic/checks here */
+	return 0;
 }
 
 static struct dentry *samplefs_mount(struct file_system_type *fs_type,
@@ -53,8 +135,6 @@ static struct dentry *samplefs_mount(struct file_system_type *fs_type,
 
 static void samplefs_kill_sb(struct super_block *sb)
 {
-	kfree(sb->s_fs_info);
-	sb->s_fs_info = NULL;
 	kill_litter_super(sb);
 }
 
-- 
2.19.1

